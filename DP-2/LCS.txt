MEMOIZATION APPROACH

public class Solution {

	public static int lcs(String s, String t) {
		//Your code goes here
        int[][] dp = new int[s.length()+1][t.length()+1];
        for (int i=0;i<dp.length;i++)
        {
            for (int j=0;j<dp[0].length;j++)
            {
                dp[i][j]=-1;
            }
        }
        return lcsHelper(s,0,t,0,dp);
    }
    
    private static int lcsHelper(String s, int i, String t, int j, int[][] dp)
    {
        if (i==s.length() || j== t.length())
        {
            return 0;
        }
        
        if (s.charAt(i)==t.charAt(j))
        {
            if (dp[i+1][j+1]==-1)
            {
                dp[i+1][j+1]=lcsHelper(s,i+1,t,j+1,dp);
            }
            dp[i][j]=1+dp[i+1][j+1];
        }
        else
        {
            if(dp[i+1][j]==-1)
            {
                dp[i+1][j]=lcsHelper(s,i+1,t,j,dp);
            }
            int ans1=dp[i+1][j];
            
            if(dp[i][j+1]==-1)
            {
                dp[i][j+1]=lcsHelper(s,i,t,j+1,dp);
            }
            int ans2=dp[i][j+1];
            
            dp[i][j]=Math.max(ans1,ans2);
        }
        return dp[i][j];
    }

}

DP APPROACH:
class Solution {
    public int lcs(String text1, String text2) {
        int m =text1.length();
        int n =text2.length();
        int[][] storage = new int[m+1][n+1];
        for(int i=0;i<m+1;i++){
            storage[i][0]=0;
        }
        for(int j=0;j<n+1;j++){
            storage[0][j]=0;
        }
        for(int i=1;i<m+1;i++){
            for(int j=1;j<n+1;j++){
                if(text1.charAt(i-1)==text2.charAt(j-1))
                    storage[i][j]=1+storage[i-1][j-1];
                    else{
                        storage[i][j]=Math.max(storage[i][j-1],storage[i-1][j]); 
                    }
            }
        }
        return storage[m][n];
    }
}
